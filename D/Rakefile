#! /usr/bin/rake
#
# Rake file for building binaries, libraries and unit tests. 
#
# Examples:
#
#   rake                 # default build and test
#   rake -T              # list all defined rake tasks
#   rake clean           # clean
#   rake qtab            # custom target
#   etc. etc. (see rake -T).

require 'rake/clean'

def windows? 
  return RUBY_PLATFORM =~ /(:?mswin|mingw)/ 
end

qtlhd="../../qtlHD/src/D"

if ENV['QTLHD']==nil and not File.directory?(qtlhd)
  puts "Compiling without qtab support!"
  puts ""
  puts "Check out the qtlHD directory, or"
  puts "set the QTLHD environment variable to enable qtab format"
  puts " -e.g. set QTLHD=c:/github/qtlHD/src/D"
  puts ""
  hasQTAB = false
else
  puts "Compiling with qtab support!"
  qtlhd = ENV['QTLHD'] if ENV['QTLHD']
  hasQTAB = true
end
  
LIB_PREFIX = if(windows?) then '' else 'lib' end
LIB_EXT    = if(windows?) then 'lib' else 'a' end

input_lib_arg = ""
stats_lib_arg = ""
used_libs = []

array_dfiles = Dir.glob("./src/ctl/core/array/*.d")
stats_dfiles = Dir.glob("./src/ctl/core/*.d") + Dir.glob("./src/ctl/core/stats/*.d")
qtl_dfiles = Dir.glob("./src/ctl/core/qtl/*.d")
input_dfiles = Dir.glob("./src/ctl/io/*.d") + Dir.glob("./src/ctl/io/csv/*.d")+ Dir.glob("./src/ctl/io/cmdline/*.d")
ctl_dfiles = Dir.glob("./src/ctl/core/ctl/*.d")
if hasQTAB
  qtab_dfiles  = Dir.glob(qtlhd + "/qtl/core/*.d") + ["#{qtlhd}/qtl/plugins/qtab/read_qtab.d"] + ["src/ctl/io/qtab/wrapper.d"]
end

#Unix files
CLEAN.include('*.a','*.o','*.dep','*.deps')
#Win32 files
CLEAN.include('*.#{LIB_EXT}','*.obj','*.exe','*.map')

TESTS = [ :mapctl ]

directory "test/output"

task "array" => array_dfiles do
  sh "dmd -lib -O -ofarray.#{LIB_EXT} #{array_dfiles.join(' ')}"
  used_libs += ["array.#{LIB_EXT}"]
end

task "stats" => stats_dfiles do
  sh "dmd -lib -O -ofstats.#{LIB_EXT} #{stats_dfiles.join(' ')} -Isrc/"
  used_libs += ["stats.#{LIB_EXT}"]
end

task "input" => input_dfiles do
  sh "dmd -lib -O -ofinput.#{LIB_EXT} #{input_dfiles.join(' ')} #{input_lib_arg} -Isrc/"
  used_libs += ["input.#{LIB_EXT}"]
end

task "ctl" => ctl_dfiles do
  sh "dmd -lib -O -ofctl.#{LIB_EXT} #{ctl_dfiles.join(' ')} -Isrc/"
  used_libs += ["ctl.#{LIB_EXT}"]
end

task "qtllib" => qtl_dfiles do
  sh "dmd -lib -O -ofqtl.#{LIB_EXT} #{qtl_dfiles.join(' ')} -Isrc/"
  stats_lib_arg = "qtl.#{LIB_EXT} -version=QTL"
end

task "qtablib" do
  input_lib_arg = "qtab.#{LIB_EXT} -I#{qtlhd} -version=QTAB"
  sh "dmd -lib -O -ofqtab.#{LIB_EXT} #{qtab_dfiles.join(' ')} -Isrc/"
end

file "mapctl" => ["ctl","input","stats","array"] do
  sh "dmd -O src/ctl/mapctl.d #{used_libs.join(' ')} -Isrc/"
end

desc "Test mapctl"
task :test_all => [ :mapctl ] do 
  print "Testing mapctl\n"
  sh "./mapctl -nperms=5"
end

desc "Default build and tests"
task :default => [:build, :test]

desc "Build mapctl"
task :build => [:mapctl]

desc "Build mapctl with qtl support"
task :qtl => ["qtllib","mapctl"]

desc "Build mapctl with qtab support"
task :qtab => ["qtablib","mapctl"]

desc "Test mapqtl with qtab support"
task :test_qtab => [ :qtab ] do
  sh "./mapctl -f=qtab  -p=test/data/multi_phenotypes.qtab -g=test/data/multi_genotypes.qtab"
end


