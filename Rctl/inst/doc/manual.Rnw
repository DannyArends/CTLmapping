%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Danny Arends
% The ctl mapping routine
%\VignetteIndexEntry{Manual}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[10pt]{article}

\usepackage{times}
\usepackage{amsmath}
\usepackage{url}
\usepackage{color}

% revise margins
\setlength{\headheight}{0.0in}
\setlength{\topmargin}{-0.25in}
\setlength{\headsep}{0.0in}
\setlength{\textheight}{9.00in}
\setlength{\footskip}{0.5in}
\setlength{\oddsidemargin}{0in}
\setlength{\evensidemargin}{0in}
\setlength{\textwidth}{6.5in}

\setlength{\parskip}{6pt}
\setlength{\parindent}{0pt}

\newcommand{\code}{\texttt}
\newcommand{\lod}{\text{LOD}}

% make "Figure" within figure captions a small font
\renewcommand{\figurename}{\small Figure}

\begin{document}

\SweaveOpts{prefix.string=fig}
\setkeys{Gin}{width=\textwidth} %% <- change width of figures
% Try to get the R code from running into the margin
<<echo=FALSE>>=
options(width=87, digits=3, scipen=4)
set.seed(61777369)
@ 

% Change S input/output font size
\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\footnotesize, baselinestretch=0.75, formatcom = {\color[rgb]{0, 0, 0.56}}}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\footnotesize, baselinestretch=0.75, formatcom = {\color[rgb]{0.56, 0, 0}}}

\begin{center}
\vspace*{1in}
\textbf{\Large CTL mapping in R }
 
\bigskip \bigskip 
\bigskip \bigskip 
 
{\large Danny Arends, and Ritsert C. Jansen} 

\bigskip \bigskip

{\color{blue} \tt \bfseries University of Groningen \\
Groningen Bioinformatics centre \& GCC \\
revision \# 1 \\[24pt]
XX Okt 2011}

\end{center}

\bigskip \bigskip

\textbf{\sffamily Abstract}: Correlated Trait Loci (CTL) mapping using the R package 'ctl'
\vfill

\noindent \emph{email}: \verb|Danny.Arends@Gmail.com|
\newpage

\textbf{\sffamily Some words in advance}
\nopagebreak

Welcome reader to this tutorial, you'll be thrown into the world of network reconstruction 
using differential correlations. This methodology CTL mapping is not the easiest but the 
results can be of great help unraveling trait to trait interactions in all types of 
eukaryotes. In this tutorial I'll try to use as few difficult concepts as possible. But
some always $sneak$ in.\\
\\
Enjoy this tutorial, and good luck hunting that heritability.\\
Danny Arends\\
\\
PS. Use a good text editor\\
PPS. Use a repository / backup system

\bigskip

\textbf{\sffamily Background \& Methodology}
\nopagebreak

Some introduction on the methodology, skip this chapter first (DO come back later) if you 
have a dataset and just want to use the software.

\newpage 

\textbf{\sffamily Format and load your data}
\nopagebreak

\emph{Loading your Excel / CSV data}\\
Use the example excel file and simply replace the example data by your own then: 
  $$File->Save As->TODO$$

After you have stored the data as plain text open the files in a text editor (NOT WORD, for 
windows Notepad++ is a good option) and check to see if your data is stored correctly, if 
not reformat your data in both the genotype.csv and the phenotype.csv files to match the 
format below. {\color{red} \emph{\bf{NOTE: Individuals must match between the genotype and 
the phenotype file...}}} The phenotypes.csv file containing the genotype matrix is stored 
individuals x genetic marker:

\begin{tabular}{lrrrrr}
      & Marker1 & Marker2 & Marker3 & ... & MarkerN \\
Ind1  & 1 & 1 & 1 & ... & 2 \\
Ind2  & 1 & 2 & 2 & ... & 1 \\
Ind3  & 2 & 2 & 1 & ... & 1 \\
...   & ... & ... & ... & ... & ... \\
IndN  & 1 & 1 & 1 & ... & 2 \\
\end{tabular}

The phenotypes.csv file containing individuals x trait measurements:

\begin{tabular}{lrrrrr}
      & Trait1 & Trait2 & Trait3 & ... & TraitN \\
Ind1  & 5.8    & 11.0   & 9.0    & ... & 1.6 \\
Ind2  & 6.3    & 12.2   & NA     & ... & 1.3 \\
Ind3  & 5.1    & 11.1   & 12.3   & ... & 2.0 \\
...   & ...    & ...    & ...    & ... & ... \\
IndN  & 9.8    & 15.8   & 23.0   & ... & 3.4 \\
\end{tabular}

After verifying your files are formatted correctly (this is the source of most errors).
Start R and load in the data, check that the output looks like below:
<<echo=TRUE,eval=FALSE>>=
setwd("<PATH_TO_DATA>")
genotypes <- read.csv("genotypes.csv",row.names=1,col.names=TRUE)
traits <- read.csv("traits.csv",row.names=1,col.names=TRUE)
genotypes[1:5,1:10]    #Show the first 5 individuals, 10 markers
traits[1:5,1:10]       #Show the first 5 individuals, 10 traits
@

\emph{Use an R/qtl formatted dataset}\\
Provided is the main interface functions to R/qtl: $CTLscan.cross()$ this functions accepts and 
R/qtl formatted cross object as input and will scan CTL, perform permutations and transform the
detected differential correlation to LOD score matrices.
As an example we show the code to scan the multitrait dataset provided in R/qtl:

<<echo=TRUE,eval=FALSE>>=
require(qtl)        #Loads the R/qtl package
data(multitrait)    #Loads the dataset
multitrait          #Print basic dataset information
@

\emph{Adding genetic map information}\\
This step is optional, but plots and generated networks look much nicer when chromosome locations
of genetic markers are supplied. The 'mapinfo' object is matrix with 3 columns: "Chr" - the 
chromosome number, "cM" - the location of the marker in centiMorgans and the 3rd column "Mbp" - The 
location of the marker in Mega basepairs. The structure of the $mapinfo.csv$ file:

\begin{tabular}{lrrr}
      & Chr    & cM     & Mbp \\
Ind1  & 1    & 1.0   & 0.01   \\
Ind2  & 1    & 1.2   & 0.34   \\
Ind3  & 1    & 3.1   & 1.3    \\
...   & ...  & ...   & ...    \\
IndN  & 24   & 120.8 & 20.3   \\
\end{tabular}

We load the genetic map data into R by using the following command:

<<echo=TRUE,eval=FALSE>>=
mapinfo <- read.csv("mapinfo.csv",row.names=1,col.names=TRUE)
traits[1:5,1:3]     #Show the first 5 marker records
@
Finally... after all this we can start scanning QTL and CTL...
\bigskip

\textbf{\sffamily Scanning for CTL / $CTLscan$}
\nopagebreak

We start explaining how to map CTL using the basic options of the $CTLscan$ function. This function 
scan CTL and produces an output "CTLobject".
<<echo=TRUE,eval=FALSE>>=
require(ctl)                     #Loads the R/ctl package
data(ath.metab)                  #Loads the example dataset
geno <- ath.metab$genotypes      #Short name
traits <- ath.metab$phenotypes   #Short name

#Scan all phenotypes for CTLs, using the default options (Could take some time)
ctls <- CTLscan(geno,traits)
@
If you have loaded an R/qtl "cross" object, use the $CTLscan.cross$ interface, this will automagically 
extract the cross, check if the type of "cross" is supported, and deal with the $geno.enc$ parameter:
<<echo=TRUE,eval=FALSE>>=
library(qtl)
data(multitrait)
ctls <- CTLscan.cross(multitrait)
@

Now you might feel tempted to just dive into the results, But... first lets take a look at some 
options that might apply to your experimental setup like treatments applied or growth conditions, 
and which (if set incorrectly) could seriously reduce mapping power. Also you might want to add 
your own/previous QTL results.

\emph{CTLscan options}\\
The genotype matrix and the $geno.enc$ parameter, the phenotype matrix, the important $n.perms$ 
parameter, which should be set to as many as possible, especially when publishing any results, 
but for a quick scan 100 is ussualy sufficient.

When experimental setups are more complex a user can supply QTL results via the $have.qtl$ option.
An example is shown below in which we use QTL results obtained by using single marker mapping via 
$scanone$ and the new Multiple QTL mapping routine $mqmscan$ in R/qtl:

<<echo=TRUE,eval=FALSE>>=
require(qtl)        #load the R/qtl package
data(multitrait)    #load the dataset
oneqtls   <- scanone(multitrait, pheno.col=1:24)[,-c(1,2)]
ctls_one  <- CTLscan.cross(multitrait, pheno.col=1:2, have.qtl=qtls)
@

And a more advanced example where the MQM scan uses 30 genetic markers as cofactors to first build 
up a genetic model underlying the QTL and locus to locus interactions:

<<echo=TRUE,eval=FALSE>>=
cofactors <- mqmautocofactors(multitrait, 30)
mqm_qtls  <- mqmscanone(multitrait, cofactors=cofactors, pheno.col=1:24)[,-c(1,2)]
ctls_mqm  <- CTLscan.cross(multitrait, pheno.col=1:2, have.qtl=qtls)
@

CTLs can be condition dependant just like QTL, so if one has multiple conditions or treatments. we 
need to acomodate that in the underlying models. If no QTLs are supplied the internal QTL mapping 
routine is used, which can deal with just a single condition per individual. An environmental 
condition can be specified by the $conditions$ parameter:

<<echo=TRUE,eval=FALSE>>=
#Specify that individuals 1:81 were in condition A / e.g. treatment
#Specify that individuals 82:162 were in condition B / e.g. control
conditions <- c(rep(1,81),rep(2,81))
ctls <- CTLscan(geno, traits, conditions=conditions)
@


\bigskip
\textbf{\sffamily RESULTS - Plots and CTL networks}
\nopagebreak

So now that we have our ctls calculated we can visualize the results in multiple ways.
The easiest way is first to plot the two overview CTL heatmaps. The first heatmap shows 
the summarized LOD scores for the Trait X Marker CTLs. This plot normally looks very 
similar to a QTL heatmap:
<<echo=TRUE,eval=FALSE>>=
image(ctls,against="markers")
@
The second heatmap shows the summarized LOD scores for the Trait * Trait CTLs, this 
shows the summarized amount of evidence we find for each Trait * Trait interaction:
<<echo=TRUE,eval=FALSE>>=
image(ctls,against="phenotypes")
@
After the overview plots it is time to go more in depth, and look at some individual CTL 
profiles the CTLobject 'ctls' contains multiple CTLscans. To print a summary of the first 
scan use:
<<echo=TRUE,eval=FALSE>>=
ctls[[1]]
@
To plot other summaries just replace the 1 by the trait number. We can also use the plot 
function on individual CTLscans and shows a colorful and detailed view of the 
(selected) Trait x Marker X Traits interactions detected in the dataset.
<<echo=TRUE,eval=FALSE>>=
plot(ctls[[1]])
@

\bigskip
\textbf{\sffamily Big data and Dctl}
\nopagebreak

Big datsets require special care, R isn't the best platform to deal with large scale genomics data 
from micro- or tilling arrays (Just to mention RNAseq and full DNA strand sequencing). Thus we also
provide a commandline version of out CTL mapping tool: mapctl.exe, for more information on all the 
command line parameters can be found at http://www.mapctl.org/mapctl.html
The mapctl commandline tool uses the same input files as the R version, and supports qtab the new 
genotype and phenotype encoding scheme used by qtlHD.
It provides only scanning and permutation features, the output is analyzed in R as outlined above. 
To load the results from a mapctl scan into R by specifying the input files and the output directory 
created by the tool using:

<<echo=TRUE,eval=FALSE>>=
ctls <- read.dctl("genotypes.csv","phenotypes.csv",results="<PATH>/output/")
@

\bigskip
\textbf{\sffamily Significance using CTLpermute}
\nopagebreak

Explains how to determine CTL significance using the CTLpermute function.


\newpage
{\small
\noindent \textbf{\sffamily Package CTL function overview} \\
\noindent \begin{tabular}{ll} 
\hspace*{25mm} & \hspace*{103mm} \\ \hline
CTLscan & Main function for Genome wide scan for Correlated Trait Loci \\
CTLscan.network & Scan only a subset of traits for CTL using start gene(s) \\
CTLpermute & Significance thresholds for CTL by permutation\\
plot & Plot CTL profiles at increasing cut-offs \\
image & Image a multiple phenotype scan \\
\hline
\end{tabular}
}

\end{document}
